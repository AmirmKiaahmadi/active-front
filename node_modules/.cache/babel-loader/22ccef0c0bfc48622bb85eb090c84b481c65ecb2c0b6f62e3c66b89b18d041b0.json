{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { timeout } from './timeout.js';\nimport '../_version.js';\nconst MAX_RETRY_TIME = 2000;\n/**\n * Returns a promise that resolves to a window client matching the passed\n * `resultingClientId`. For browsers that don't support `resultingClientId`\n * or if waiting for the resulting client to apper takes too long, resolve to\n * `undefined`.\n *\n * @param {string} [resultingClientId]\n * @return {Promise<Client|undefined>}\n * @private\n */\nexport async function resultingClientExists(resultingClientId) {\n  if (!resultingClientId) {\n    return;\n  }\n  let existingWindows = await self.clients.matchAll({\n    type: 'window'\n  });\n  const existingWindowIds = new Set(existingWindows.map(w => w.id));\n  let resultingWindow;\n  const startTime = performance.now();\n  // Only wait up to `MAX_RETRY_TIME` to find a matching client.\n  while (performance.now() - startTime < MAX_RETRY_TIME) {\n    existingWindows = await self.clients.matchAll({\n      type: 'window'\n    });\n    resultingWindow = existingWindows.find(w => {\n      if (resultingClientId) {\n        // If we have a `resultingClientId`, we can match on that.\n        return w.id === resultingClientId;\n      } else {\n        // Otherwise match on finding a window not in `existingWindowIds`.\n        return !existingWindowIds.has(w.id);\n      }\n    });\n    if (resultingWindow) {\n      break;\n    }\n    // Sleep for 100ms and retry.\n    await timeout(100);\n  }\n  return resultingWindow;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}