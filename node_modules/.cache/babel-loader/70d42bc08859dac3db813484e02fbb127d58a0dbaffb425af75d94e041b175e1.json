{"ast":null,"code":"import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genCollapseMotion } from '../../style/motion';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genDirectoryStyle } from './directory';\n// ============================ Keyframes =============================\nconst treeNodeFX = new Keyframes('ant-tree-node-fx-do-not-use', {\n  '0%': {\n    opacity: 0\n  },\n  '100%': {\n    opacity: 1\n  }\n});\n// ============================== Switch ==============================\nconst getSwitchStyle = (prefixCls, token) => ({\n  [\".\".concat(prefixCls, \"-switcher-icon\")]: {\n    display: 'inline-block',\n    fontSize: 10,\n    verticalAlign: 'baseline',\n    svg: {\n      transition: \"transform \".concat(token.motionDurationSlow)\n    }\n  }\n});\n// =============================== Drop ===============================\nconst getDropIndicatorStyle = (prefixCls, token) => ({\n  [\".\".concat(prefixCls, \"-drop-indicator\")]: {\n    position: 'absolute',\n    // it should displayed over the following node\n    zIndex: 1,\n    height: 2,\n    backgroundColor: token.colorPrimary,\n    borderRadius: 1,\n    pointerEvents: 'none',\n    '&:after': {\n      position: 'absolute',\n      top: -3,\n      insetInlineStart: -6,\n      width: 8,\n      height: 8,\n      backgroundColor: 'transparent',\n      border: \"\".concat(unit(token.lineWidthBold), \" solid \").concat(token.colorPrimary),\n      borderRadius: '50%',\n      content: '\"\"'\n    }\n  }\n});\nexport const genBaseStyle = (prefixCls, token) => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    titleHeight,\n    indentSize,\n    nodeSelectedBg,\n    nodeHoverBg,\n    colorTextQuaternary\n  } = token;\n  return {\n    [treeCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      background: token.colorBgContainer,\n      borderRadius: token.borderRadius,\n      transition: \"background-color \".concat(token.motionDurationSlow),\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      [\"&\".concat(treeCls, \"-rtl \").concat(treeCls, \"-switcher_close \").concat(treeCls, \"-switcher-icon svg\")]: {\n        transform: 'rotate(90deg)'\n      },\n      [\"&-focused:not(:hover):not(\".concat(treeCls, \"-active-focused)\")]: Object.assign({}, genFocusOutline(token)),\n      // =================== Virtual List ===================\n      [\"\".concat(treeCls, \"-list-holder-inner\")]: {\n        alignItems: 'flex-start'\n      },\n      [\"&\".concat(treeCls, \"-block-node\")]: {\n        [\"\".concat(treeCls, \"-list-holder-inner\")]: {\n          alignItems: 'stretch',\n          // >>> Title\n          [\"\".concat(treeCls, \"-node-content-wrapper\")]: {\n            flex: 'auto'\n          },\n          // >>> Drag\n          [\"\".concat(treeNodeCls, \".dragging:after\")]: {\n            position: 'absolute',\n            inset: 0,\n            border: \"1px solid \".concat(token.colorPrimary),\n            opacity: 0,\n            animationName: treeNodeFX,\n            animationDuration: token.motionDurationSlow,\n            animationPlayState: 'running',\n            animationFillMode: 'forwards',\n            content: '\"\"',\n            pointerEvents: 'none',\n            borderRadius: token.borderRadius\n          }\n        }\n      },\n      // ===================== TreeNode =====================\n      [treeNodeCls]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        marginBottom: treeNodePadding,\n        lineHeight: unit(titleHeight),\n        position: 'relative',\n        // 非常重要，避免 drop-indicator 在拖拽过程中闪烁\n        '&:before': {\n          content: '\"\"',\n          position: 'absolute',\n          zIndex: 1,\n          insetInlineStart: 0,\n          width: '100%',\n          top: '100%',\n          height: treeNodePadding\n        },\n        // Disabled\n        [\"&-disabled \".concat(treeCls, \"-node-content-wrapper\")]: {\n          color: token.colorTextDisabled,\n          cursor: 'not-allowed',\n          '&:hover': {\n            background: 'transparent'\n          }\n        },\n        // not disable\n        [\"&:not(\".concat(treeNodeCls, \"-disabled)\")]: {\n          // >>> Title\n          [\"\".concat(treeCls, \"-node-content-wrapper\")]: {\n            '&:hover': {\n              color: token.nodeHoverColor\n            }\n          }\n        },\n        [\"&-active \".concat(treeCls, \"-node-content-wrapper\")]: {\n          background: token.controlItemBgHover\n        },\n        [\"&:not(\".concat(treeNodeCls, \"-disabled).filter-node \").concat(treeCls, \"-title\")]: {\n          color: token.colorPrimary,\n          fontWeight: 500\n        },\n        '&-draggable': {\n          cursor: 'grab',\n          [\"\".concat(treeCls, \"-draggable-icon\")]: {\n            // https://github.com/ant-design/ant-design/issues/41915\n            flexShrink: 0,\n            width: titleHeight,\n            textAlign: 'center',\n            visibility: 'visible',\n            color: colorTextQuaternary\n          },\n          [\"&\".concat(treeNodeCls, \"-disabled \").concat(treeCls, \"-draggable-icon\")]: {\n            visibility: 'hidden'\n          }\n        }\n      },\n      // >>> Indent\n      [\"\".concat(treeCls, \"-indent\")]: {\n        alignSelf: 'stretch',\n        whiteSpace: 'nowrap',\n        userSelect: 'none',\n        '&-unit': {\n          display: 'inline-block',\n          width: indentSize\n        }\n      },\n      // >>> Drag Handler\n      [\"\".concat(treeCls, \"-draggable-icon\")]: {\n        visibility: 'hidden'\n      },\n      // Switcher / Checkbox\n      [\"\".concat(treeCls, \"-switcher, \").concat(treeCls, \"-checkbox\")]: {\n        marginInlineEnd: token.calc(token.calc(titleHeight).sub(token.controlInteractiveSize)).div(2).equal()\n      },\n      // >>> Switcher\n      [\"\".concat(treeCls, \"-switcher\")]: Object.assign(Object.assign({}, getSwitchStyle(prefixCls, token)), {\n        position: 'relative',\n        flex: 'none',\n        alignSelf: 'stretch',\n        width: titleHeight,\n        textAlign: 'center',\n        cursor: 'pointer',\n        userSelect: 'none',\n        transition: \"all \".concat(token.motionDurationSlow),\n        '&-noop': {\n          cursor: 'unset'\n        },\n        '&:before': {\n          pointerEvents: 'none',\n          content: '\"\"',\n          width: titleHeight,\n          height: titleHeight,\n          position: 'absolute',\n          left: {\n            _skip_check_: true,\n            value: 0\n          },\n          top: 0,\n          borderRadius: token.borderRadius,\n          transition: \"all \".concat(token.motionDurationSlow)\n        },\n        [\"&:not(\".concat(treeCls, \"-switcher-noop):hover:before\")]: {\n          backgroundColor: token.colorBgTextHover\n        },\n        [\"&_close \".concat(treeCls, \"-switcher-icon svg\")]: {\n          transform: 'rotate(-90deg)'\n        },\n        '&-loading-icon': {\n          color: token.colorPrimary\n        },\n        '&-leaf-line': {\n          position: 'relative',\n          zIndex: 1,\n          display: 'inline-block',\n          width: '100%',\n          height: '100%',\n          // https://github.com/ant-design/ant-design/issues/31884\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            marginInlineStart: -1,\n            borderInlineEnd: \"1px solid \".concat(token.colorBorder),\n            content: '\"\"'\n          },\n          '&:after': {\n            position: 'absolute',\n            width: token.calc(token.calc(titleHeight).div(2).equal()).mul(0.8).equal(),\n            height: token.calc(titleHeight).div(2).equal(),\n            borderBottom: \"1px solid \".concat(token.colorBorder),\n            content: '\"\"'\n          }\n        }\n      }),\n      // >>> Title\n      // add `${treeCls}-checkbox + span` to cover checkbox `${checkboxCls} + span`\n      [\"\".concat(treeCls, \"-node-content-wrapper\")]: Object.assign(Object.assign({\n        position: 'relative',\n        minHeight: titleHeight,\n        paddingBlock: 0,\n        paddingInline: token.paddingXS,\n        background: 'transparent',\n        borderRadius: token.borderRadius,\n        cursor: 'pointer',\n        transition: \"all \".concat(token.motionDurationMid, \", border 0s, line-height 0s, box-shadow 0s\")\n      }, getDropIndicatorStyle(prefixCls, token)), {\n        '&:hover': {\n          backgroundColor: nodeHoverBg\n        },\n        [\"&\".concat(treeCls, \"-node-selected\")]: {\n          color: token.nodeSelectedColor,\n          backgroundColor: nodeSelectedBg\n        },\n        // Icon\n        [\"\".concat(treeCls, \"-iconEle\")]: {\n          display: 'inline-block',\n          width: titleHeight,\n          height: titleHeight,\n          textAlign: 'center',\n          verticalAlign: 'top',\n          '&:empty': {\n            display: 'none'\n          }\n        }\n      }),\n      // https://github.com/ant-design/ant-design/issues/28217\n      [\"\".concat(treeCls, \"-unselectable \").concat(treeCls, \"-node-content-wrapper:hover\")]: {\n        backgroundColor: 'transparent'\n      },\n      [\"\".concat(treeNodeCls, \".drop-container > [draggable]\")]: {\n        boxShadow: \"0 0 0 2px \".concat(token.colorPrimary)\n      },\n      // ==================== Show Line =====================\n      '&-show-line': {\n        // ================ Indent lines ================\n        [\"\".concat(treeCls, \"-indent-unit\")]: {\n          position: 'relative',\n          height: '100%',\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            borderInlineEnd: \"1px solid \".concat(token.colorBorder),\n            content: '\"\"'\n          },\n          '&-end:before': {\n            display: 'none'\n          }\n        },\n        // ============== Cover Background ==============\n        [\"\".concat(treeCls, \"-switcher\")]: {\n          background: 'transparent',\n          '&-line-icon': {\n            // https://github.com/ant-design/ant-design/issues/32813\n            verticalAlign: '-0.15em'\n          }\n        }\n      },\n      [\"\".concat(treeNodeCls, \"-leaf-last \").concat(treeCls, \"-switcher-leaf-line:before\")]: {\n        top: 'auto !important',\n        bottom: 'auto !important',\n        height: \"\".concat(unit(token.calc(titleHeight).div(2).equal()), \" !important\")\n      }\n    })\n  };\n};\n// ============================== Merged ==============================\nexport const genTreeStyle = (prefixCls, token) => {\n  const treeCls = \".\".concat(prefixCls);\n  const treeNodeCls = \"\".concat(treeCls, \"-treenode\");\n  const treeNodePadding = token.calc(token.paddingXS).div(2).equal();\n  const treeToken = mergeToken(token, {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding\n  });\n  return [\n  // Basic\n  genBaseStyle(prefixCls, treeToken),\n  // Directory\n  genDirectoryStyle(treeToken)];\n};\nexport const initComponentToken = token => {\n  const {\n    controlHeightSM,\n    controlItemBgHover,\n    controlItemBgActive\n  } = token;\n  const titleHeight = controlHeightSM;\n  return {\n    titleHeight,\n    indentSize: titleHeight,\n    nodeHoverBg: controlItemBgHover,\n    nodeHoverColor: token.colorText,\n    nodeSelectedBg: controlItemBgActive,\n    nodeSelectedColor: token.colorText\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    colorTextLightSolid,\n    colorPrimary\n  } = token;\n  return Object.assign(Object.assign({}, initComponentToken(token)), {\n    directoryNodeSelectedColor: colorTextLightSolid,\n    directoryNodeSelectedBg: colorPrimary\n  });\n};\nexport default genStyleHooks('Tree', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [{\n    [token.componentCls]: getCheckboxStyle(\"\".concat(prefixCls, \"-checkbox\"), token)\n  }, genTreeStyle(prefixCls, token), genCollapseMotion(token)];\n}, prepareComponentToken);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}