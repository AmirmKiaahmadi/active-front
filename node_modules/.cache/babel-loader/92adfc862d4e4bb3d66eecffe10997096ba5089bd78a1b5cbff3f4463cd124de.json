{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent, textEllipsis } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genBorderedStyle = token => {\n  const {\n    componentCls,\n    labelBg\n  } = token;\n  return {\n    [\"&\".concat(componentCls, \"-bordered\")]: {\n      [\"> \".concat(componentCls, \"-view\")]: {\n        border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorSplit),\n        '> table': {\n          tableLayout: 'auto'\n        },\n        [\"\".concat(componentCls, \"-row\")]: {\n          borderBottom: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorSplit),\n          '&:last-child': {\n            borderBottom: 'none'\n          },\n          [\"> \".concat(componentCls, \"-item-label, > \").concat(componentCls, \"-item-content\")]: {\n            padding: \"\".concat(unit(token.padding), \" \").concat(unit(token.paddingLG)),\n            borderInlineEnd: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorSplit),\n            '&:last-child': {\n              borderInlineEnd: 'none'\n            }\n          },\n          [\"> \".concat(componentCls, \"-item-label\")]: {\n            color: token.colorTextSecondary,\n            backgroundColor: labelBg,\n            '&::after': {\n              display: 'none'\n            }\n          }\n        }\n      },\n      [\"&\".concat(componentCls, \"-middle\")]: {\n        [\"\".concat(componentCls, \"-row\")]: {\n          [\"> \".concat(componentCls, \"-item-label, > \").concat(componentCls, \"-item-content\")]: {\n            padding: \"\".concat(unit(token.paddingSM), \" \").concat(unit(token.paddingLG))\n          }\n        }\n      },\n      [\"&\".concat(componentCls, \"-small\")]: {\n        [\"\".concat(componentCls, \"-row\")]: {\n          [\"> \".concat(componentCls, \"-item-label, > \").concat(componentCls, \"-item-content\")]: {\n            padding: \"\".concat(unit(token.paddingXS), \" \").concat(unit(token.padding))\n          }\n        }\n      }\n    }\n  };\n};\nconst genDescriptionStyles = token => {\n  const {\n    componentCls,\n    extraColor,\n    itemPaddingBottom,\n    itemPaddingEnd,\n    colonMarginRight,\n    colonMarginLeft,\n    titleMarginBottom\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign({}, resetComponent(token)), genBorderedStyle(token)), {\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      [\"\".concat(componentCls, \"-header\")]: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: titleMarginBottom\n      },\n      [\"\".concat(componentCls, \"-title\")]: Object.assign(Object.assign({}, textEllipsis), {\n        flex: 'auto',\n        color: token.titleColor,\n        fontWeight: token.fontWeightStrong,\n        fontSize: token.fontSizeLG,\n        lineHeight: token.lineHeightLG\n      }),\n      [\"\".concat(componentCls, \"-extra\")]: {\n        marginInlineStart: 'auto',\n        color: extraColor,\n        fontSize: token.fontSize\n      },\n      [\"\".concat(componentCls, \"-view\")]: {\n        width: '100%',\n        borderRadius: token.borderRadiusLG,\n        table: {\n          width: '100%',\n          tableLayout: 'fixed',\n          borderCollapse: 'collapse'\n        }\n      },\n      [\"\".concat(componentCls, \"-row\")]: {\n        '> th, > td': {\n          paddingBottom: itemPaddingBottom,\n          paddingInlineEnd: itemPaddingEnd\n        },\n        '> th:last-child, > td:last-child': {\n          paddingInlineEnd: 0\n        },\n        '&:last-child': {\n          borderBottom: 'none',\n          '> th, > td': {\n            paddingBottom: 0\n          }\n        }\n      },\n      [\"\".concat(componentCls, \"-item-label\")]: {\n        color: token.colorTextTertiary,\n        fontWeight: 'normal',\n        fontSize: token.fontSize,\n        lineHeight: token.lineHeight,\n        textAlign: 'start',\n        '&::after': {\n          content: '\":\"',\n          position: 'relative',\n          top: -0.5,\n          // magic for position\n          marginInline: \"\".concat(unit(colonMarginLeft), \" \").concat(unit(colonMarginRight))\n        },\n        [\"&\".concat(componentCls, \"-item-no-colon::after\")]: {\n          content: '\"\"'\n        }\n      },\n      [\"\".concat(componentCls, \"-item-no-label\")]: {\n        '&::after': {\n          margin: 0,\n          content: '\"\"'\n        }\n      },\n      [\"\".concat(componentCls, \"-item-content\")]: {\n        display: 'table-cell',\n        flex: 1,\n        color: token.contentColor,\n        fontSize: token.fontSize,\n        lineHeight: token.lineHeight,\n        wordBreak: 'break-word',\n        overflowWrap: 'break-word'\n      },\n      [\"\".concat(componentCls, \"-item\")]: {\n        paddingBottom: 0,\n        verticalAlign: 'top',\n        '&-container': {\n          display: 'flex',\n          [\"\".concat(componentCls, \"-item-label\")]: {\n            display: 'inline-flex',\n            alignItems: 'baseline'\n          },\n          [\"\".concat(componentCls, \"-item-content\")]: {\n            display: 'inline-flex',\n            alignItems: 'baseline',\n            minWidth: '1em'\n          }\n        }\n      },\n      '&-middle': {\n        [\"\".concat(componentCls, \"-row\")]: {\n          '> th, > td': {\n            paddingBottom: token.paddingSM\n          }\n        }\n      },\n      '&-small': {\n        [\"\".concat(componentCls, \"-row\")]: {\n          '> th, > td': {\n            paddingBottom: token.paddingXS\n          }\n        }\n      }\n    })\n  };\n};\nexport const prepareComponentToken = token => ({\n  labelBg: token.colorFillAlter,\n  titleColor: token.colorText,\n  titleMarginBottom: token.fontSizeSM * token.lineHeightSM,\n  itemPaddingBottom: token.padding,\n  itemPaddingEnd: token.padding,\n  colonMarginRight: token.marginXS,\n  colonMarginLeft: token.marginXXS / 2,\n  contentColor: token.colorText,\n  extraColor: token.colorText\n});\n// ============================== Export ==============================\nexport default genStyleHooks('Descriptions', token => {\n  const descriptionToken = mergeToken(token, {});\n  return genDescriptionStyles(descriptionToken);\n}, prepareComponentToken);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}