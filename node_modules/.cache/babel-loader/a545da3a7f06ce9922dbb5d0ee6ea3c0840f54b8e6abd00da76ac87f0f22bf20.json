{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\n// =====================================================\n// ==                  Outlined                       ==\n// =====================================================\nconst genBaseOutlinedStyle = (token, options) => {\n  const {\n    componentCls,\n    antCls,\n    controlOutlineWidth\n  } = token;\n  return {\n    [\"&:not(\".concat(componentCls, \"-customize-input) \").concat(componentCls, \"-selector\")]: {\n      border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(options.borderColor),\n      background: token.selectorBg\n    },\n    [\"&:not(\".concat(componentCls, \"-disabled):not(\").concat(componentCls, \"-customize-input):not(\").concat(antCls, \"-pagination-size-changer)\")]: {\n      [\"&:hover \".concat(componentCls, \"-selector\")]: {\n        borderColor: options.hoverBorderHover\n      },\n      [\"\".concat(componentCls, \"-focused& \").concat(componentCls, \"-selector\")]: {\n        borderColor: options.activeBorderColor,\n        boxShadow: \"0 0 0 \".concat(unit(controlOutlineWidth), \" \").concat(options.activeOutlineColor),\n        outline: 0\n      },\n      [\"\".concat(componentCls, \"-prefix\")]: {\n        color: options.color\n      }\n    }\n  };\n};\nconst genOutlinedStatusStyle = (token, options) => ({\n  [\"&\".concat(token.componentCls, \"-status-\").concat(options.status)]: Object.assign({}, genBaseOutlinedStyle(token, options))\n});\nconst genOutlinedStyle = token => ({\n  '&-outlined': Object.assign(Object.assign(Object.assign(Object.assign({}, genBaseOutlinedStyle(token, {\n    borderColor: token.colorBorder,\n    hoverBorderHover: token.hoverBorderColor,\n    activeBorderColor: token.activeBorderColor,\n    activeOutlineColor: token.activeOutlineColor,\n    color: token.colorText\n  })), genOutlinedStatusStyle(token, {\n    status: 'error',\n    borderColor: token.colorError,\n    hoverBorderHover: token.colorErrorHover,\n    activeBorderColor: token.colorError,\n    activeOutlineColor: token.colorErrorOutline,\n    color: token.colorError\n  })), genOutlinedStatusStyle(token, {\n    status: 'warning',\n    borderColor: token.colorWarning,\n    hoverBorderHover: token.colorWarningHover,\n    activeBorderColor: token.colorWarning,\n    activeOutlineColor: token.colorWarningOutline,\n    color: token.colorWarning\n  })), {\n    [\"&\".concat(token.componentCls, \"-disabled\")]: {\n      [\"&:not(\".concat(token.componentCls, \"-customize-input) \").concat(token.componentCls, \"-selector\")]: {\n        background: token.colorBgContainerDisabled,\n        color: token.colorTextDisabled\n      }\n    },\n    [\"&\".concat(token.componentCls, \"-multiple \").concat(token.componentCls, \"-selection-item\")]: {\n      background: token.multipleItemBg,\n      border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.multipleItemBorderColor)\n    }\n  })\n});\n// =====================================================\n// ==                   Filled                        ==\n// =====================================================\nconst genBaseFilledStyle = (token, options) => {\n  const {\n    componentCls,\n    antCls\n  } = token;\n  return {\n    [\"&:not(\".concat(componentCls, \"-customize-input) \").concat(componentCls, \"-selector\")]: {\n      background: options.bg,\n      border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" transparent\"),\n      color: options.color\n    },\n    [\"&:not(\".concat(componentCls, \"-disabled):not(\").concat(componentCls, \"-customize-input):not(\").concat(antCls, \"-pagination-size-changer)\")]: {\n      [\"&:hover \".concat(componentCls, \"-selector\")]: {\n        background: options.hoverBg\n      },\n      [\"\".concat(componentCls, \"-focused& \").concat(componentCls, \"-selector\")]: {\n        background: token.selectorBg,\n        borderColor: options.activeBorderColor,\n        outline: 0\n      }\n    }\n  };\n};\nconst genFilledStatusStyle = (token, options) => ({\n  [\"&\".concat(token.componentCls, \"-status-\").concat(options.status)]: Object.assign({}, genBaseFilledStyle(token, options))\n});\nconst genFilledStyle = token => ({\n  '&-filled': Object.assign(Object.assign(Object.assign(Object.assign({}, genBaseFilledStyle(token, {\n    bg: token.colorFillTertiary,\n    hoverBg: token.colorFillSecondary,\n    activeBorderColor: token.activeBorderColor,\n    color: token.colorText\n  })), genFilledStatusStyle(token, {\n    status: 'error',\n    bg: token.colorErrorBg,\n    hoverBg: token.colorErrorBgHover,\n    activeBorderColor: token.colorError,\n    color: token.colorError\n  })), genFilledStatusStyle(token, {\n    status: 'warning',\n    bg: token.colorWarningBg,\n    hoverBg: token.colorWarningBgHover,\n    activeBorderColor: token.colorWarning,\n    color: token.colorWarning\n  })), {\n    [\"&\".concat(token.componentCls, \"-disabled\")]: {\n      [\"&:not(\".concat(token.componentCls, \"-customize-input) \").concat(token.componentCls, \"-selector\")]: {\n        borderColor: token.colorBorder,\n        background: token.colorBgContainerDisabled,\n        color: token.colorTextDisabled\n      }\n    },\n    [\"&\".concat(token.componentCls, \"-multiple \").concat(token.componentCls, \"-selection-item\")]: {\n      background: token.colorBgContainer,\n      border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorSplit)\n    }\n  })\n});\n// =====================================================\n// ==                 Borderless                      ==\n// =====================================================\nconst genBorderlessStyle = token => ({\n  '&-borderless': {\n    [\"\".concat(token.componentCls, \"-selector\")]: {\n      background: 'transparent',\n      border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" transparent\")\n    },\n    [\"&\".concat(token.componentCls, \"-disabled\")]: {\n      [\"&:not(\".concat(token.componentCls, \"-customize-input) \").concat(token.componentCls, \"-selector\")]: {\n        color: token.colorTextDisabled\n      }\n    },\n    [\"&\".concat(token.componentCls, \"-multiple \").concat(token.componentCls, \"-selection-item\")]: {\n      background: token.multipleItemBg,\n      border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.multipleItemBorderColor)\n    },\n    // Status\n    [\"&\".concat(token.componentCls, \"-status-error\")]: {\n      [\"\".concat(token.componentCls, \"-prefix, \").concat(token.componentCls, \"-selection-item\")]: {\n        color: token.colorError\n      }\n    },\n    [\"&\".concat(token.componentCls, \"-status-warning\")]: {\n      [\"\".concat(token.componentCls, \"-prefix, \").concat(token.componentCls, \"-selection-item\")]: {\n        color: token.colorWarning\n      }\n    }\n  }\n});\nconst genVariantsStyle = token => ({\n  [token.componentCls]: Object.assign(Object.assign(Object.assign({}, genOutlinedStyle(token)), genFilledStyle(token)), genBorderlessStyle(token))\n});\nexport default genVariantsStyle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}