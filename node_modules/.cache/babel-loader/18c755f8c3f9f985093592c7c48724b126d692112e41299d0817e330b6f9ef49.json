{"ast":null,"code":"/// <reference lib=\"webworker\" />\n/* eslint-disable no-restricted-globals */// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';// import Icon from './assets/image/logo.png';\nclientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\n_ref=>{let{request,url}=_ref;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains\n// a file extension, skip.\nif(url.pathname.match(fileExtensionRegexp)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(// Add in any other file extensions or routing criteria as needed.\n_ref2=>{let{url}=_ref2;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[// Ensure that once this runtime cache reaches a maximum size the\n// least-recently used images are removed.\nnew ExpirationPlugin({maxEntries:50})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',event=>{if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});// Any other custom service worker logic can go here.\n// self.addEventListener('push', event => {\n//   event.waitUntil(\n//     self.registration.showNotification(event.data?.json()?.title || 'مزرعه', {\n//       body: event.data?.json()?.body,\n//       icon: Icon,\n//       dir: 'rtl',\n//       vibrate: [300, 100, 400],\n//       tag: 'mazraeapp',\n//       renotify: true,\n//       data: {url: event.data?.json()?.url}, //the url which we gonna use later\n//       actions: [{action: 'open_url', title: 'Read Now'}],\n//     }),\n//   );\n// });\n// self.addEventListener(\n//   'notificationclick',\n//   function (event) {\n//     event.waitUntil(\n//       self.clients\n//         .matchAll({\n//           type: 'window',\n//           includeUncontrolled: true,\n//         })\n//         .then(function (clientList) {\n//           if (event.notification.data.url) {\n//             let client = null;\n//             for (let i = 0; i < clientList.length; i++) {\n//               const item = clientList[i];\n//               if (item.url) {\n//                 //@ts-ignore\n//                 client = item;\n//                 break;\n//               }\n//             }\n//             if (client && 'navigate' in client) {\n//               //@ts-ignore\n//               client.focus();\n//               event.notification.close();\n//               //@ts-ignore\n//               return client.navigate(event.notification.data.url);\n//             } else {\n//               event.notification.close();\n//               // if client doesn't have navigate function, try to open a new browser window\n//               return self.clients.openWindow(event.notification.data.url);\n//             }\n//           }\n//         }),\n//     );\n//   },\n//   false,\n// );","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}