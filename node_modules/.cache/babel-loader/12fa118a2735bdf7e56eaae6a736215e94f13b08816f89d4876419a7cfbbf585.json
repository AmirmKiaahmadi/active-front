{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks } from '../../theme/internal';\nconst genAlertTypeStyle = (bgColor, borderColor, iconColor, token, alertCls) => ({\n  background: bgColor,\n  border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(borderColor),\n  [\"\".concat(alertCls, \"-icon\")]: {\n    color: iconColor\n  }\n});\nexport const genBaseStyle = token => {\n  const {\n    componentCls,\n    motionDurationSlow: duration,\n    marginXS,\n    marginSM,\n    fontSize,\n    fontSizeLG,\n    lineHeight,\n    borderRadiusLG: borderRadius,\n    motionEaseInOutCirc,\n    withDescriptionIconSize,\n    colorText,\n    colorTextHeading,\n    withDescriptionPadding,\n    defaultPadding\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      padding: defaultPadding,\n      wordWrap: 'break-word',\n      borderRadius,\n      [\"&\".concat(componentCls, \"-rtl\")]: {\n        direction: 'rtl'\n      },\n      [\"\".concat(componentCls, \"-content\")]: {\n        flex: 1,\n        minWidth: 0\n      },\n      [\"\".concat(componentCls, \"-icon\")]: {\n        marginInlineEnd: marginXS,\n        lineHeight: 0\n      },\n      '&-description': {\n        display: 'none',\n        fontSize,\n        lineHeight\n      },\n      '&-message': {\n        color: colorTextHeading\n      },\n      [\"&\".concat(componentCls, \"-motion-leave\")]: {\n        overflow: 'hidden',\n        opacity: 1,\n        transition: \"max-height \".concat(duration, \" \").concat(motionEaseInOutCirc, \", opacity \").concat(duration, \" \").concat(motionEaseInOutCirc, \",\\n        padding-top \").concat(duration, \" \").concat(motionEaseInOutCirc, \", padding-bottom \").concat(duration, \" \").concat(motionEaseInOutCirc, \",\\n        margin-bottom \").concat(duration, \" \").concat(motionEaseInOutCirc)\n      },\n      [\"&\".concat(componentCls, \"-motion-leave-active\")]: {\n        maxHeight: 0,\n        marginBottom: '0 !important',\n        paddingTop: 0,\n        paddingBottom: 0,\n        opacity: 0\n      }\n    }),\n    [\"\".concat(componentCls, \"-with-description\")]: {\n      alignItems: 'flex-start',\n      padding: withDescriptionPadding,\n      [\"\".concat(componentCls, \"-icon\")]: {\n        marginInlineEnd: marginSM,\n        fontSize: withDescriptionIconSize,\n        lineHeight: 0\n      },\n      [\"\".concat(componentCls, \"-message\")]: {\n        display: 'block',\n        marginBottom: marginXS,\n        color: colorTextHeading,\n        fontSize: fontSizeLG\n      },\n      [\"\".concat(componentCls, \"-description\")]: {\n        display: 'block',\n        color: colorText\n      }\n    },\n    [\"\".concat(componentCls, \"-banner\")]: {\n      marginBottom: 0,\n      border: '0 !important',\n      borderRadius: 0\n    }\n  };\n};\nexport const genTypeStyle = token => {\n  const {\n    componentCls,\n    colorSuccess,\n    colorSuccessBorder,\n    colorSuccessBg,\n    colorWarning,\n    colorWarningBorder,\n    colorWarningBg,\n    colorError,\n    colorErrorBorder,\n    colorErrorBg,\n    colorInfo,\n    colorInfoBorder,\n    colorInfoBg\n  } = token;\n  return {\n    [componentCls]: {\n      '&-success': genAlertTypeStyle(colorSuccessBg, colorSuccessBorder, colorSuccess, token, componentCls),\n      '&-info': genAlertTypeStyle(colorInfoBg, colorInfoBorder, colorInfo, token, componentCls),\n      '&-warning': genAlertTypeStyle(colorWarningBg, colorWarningBorder, colorWarning, token, componentCls),\n      '&-error': Object.assign(Object.assign({}, genAlertTypeStyle(colorErrorBg, colorErrorBorder, colorError, token, componentCls)), {\n        [\"\".concat(componentCls, \"-description > pre\")]: {\n          margin: 0,\n          padding: 0\n        }\n      })\n    }\n  };\n};\nexport const genActionStyle = token => {\n  const {\n    componentCls,\n    iconCls,\n    motionDurationMid,\n    marginXS,\n    fontSizeIcon,\n    colorIcon,\n    colorIconHover\n  } = token;\n  return {\n    [componentCls]: {\n      '&-action': {\n        marginInlineStart: marginXS\n      },\n      [\"\".concat(componentCls, \"-close-icon\")]: {\n        marginInlineStart: marginXS,\n        padding: 0,\n        overflow: 'hidden',\n        fontSize: fontSizeIcon,\n        lineHeight: unit(fontSizeIcon),\n        backgroundColor: 'transparent',\n        border: 'none',\n        outline: 'none',\n        cursor: 'pointer',\n        [\"\".concat(iconCls, \"-close\")]: {\n          color: colorIcon,\n          transition: \"color \".concat(motionDurationMid),\n          '&:hover': {\n            color: colorIconHover\n          }\n        }\n      },\n      '&-close-text': {\n        color: colorIcon,\n        transition: \"color \".concat(motionDurationMid),\n        '&:hover': {\n          color: colorIconHover\n        }\n      }\n    }\n  };\n};\nexport const prepareComponentToken = token => {\n  const paddingHorizontal = 12; // Fixed value here.\n  return {\n    withDescriptionIconSize: token.fontSizeHeading3,\n    defaultPadding: \"\".concat(token.paddingContentVerticalSM, \"px \").concat(paddingHorizontal, \"px\"),\n    withDescriptionPadding: \"\".concat(token.paddingMD, \"px \").concat(token.paddingContentHorizontalLG, \"px\")\n  };\n};\nexport default genStyleHooks('Alert', token => [genBaseStyle(token), genTypeStyle(token), genActionStyle(token)], prepareComponentToken);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}