{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n  'invalid-value': _ref => {\n    let {\n      paramName,\n      validValueDescription,\n      value\n    } = _ref;\n    if (!paramName || !validValueDescription) {\n      throw new Error(\"Unexpected input to 'invalid-value' error.\");\n    }\n    return \"The '\".concat(paramName, \"' parameter was given a value with an \") + \"unexpected value. \".concat(validValueDescription, \" Received a value of \") + \"\".concat(JSON.stringify(value), \".\");\n  },\n  'not-an-array': _ref2 => {\n    let {\n      moduleName,\n      className,\n      funcName,\n      paramName\n    } = _ref2;\n    if (!moduleName || !className || !funcName || !paramName) {\n      throw new Error(\"Unexpected input to 'not-an-array' error.\");\n    }\n    return \"The parameter '\".concat(paramName, \"' passed into \") + \"'\".concat(moduleName, \".\").concat(className, \".\").concat(funcName, \"()' must be an array.\");\n  },\n  'incorrect-type': _ref3 => {\n    let {\n      expectedType,\n      paramName,\n      moduleName,\n      className,\n      funcName\n    } = _ref3;\n    if (!expectedType || !paramName || !moduleName || !funcName) {\n      throw new Error(\"Unexpected input to 'incorrect-type' error.\");\n    }\n    const classNameStr = className ? \"\".concat(className, \".\") : '';\n    return \"The parameter '\".concat(paramName, \"' passed into \") + \"'\".concat(moduleName, \".\").concat(classNameStr) + \"\".concat(funcName, \"()' must be of type \").concat(expectedType, \".\");\n  },\n  'incorrect-class': _ref4 => {\n    let {\n      expectedClassName,\n      paramName,\n      moduleName,\n      className,\n      funcName,\n      isReturnValueProblem\n    } = _ref4;\n    if (!expectedClassName || !moduleName || !funcName) {\n      throw new Error(\"Unexpected input to 'incorrect-class' error.\");\n    }\n    const classNameStr = className ? \"\".concat(className, \".\") : '';\n    if (isReturnValueProblem) {\n      return \"The return value from \" + \"'\".concat(moduleName, \".\").concat(classNameStr).concat(funcName, \"()' \") + \"must be an instance of class \".concat(expectedClassName, \".\");\n    }\n    return \"The parameter '\".concat(paramName, \"' passed into \") + \"'\".concat(moduleName, \".\").concat(classNameStr).concat(funcName, \"()' \") + \"must be an instance of class \".concat(expectedClassName, \".\");\n  },\n  'missing-a-method': _ref5 => {\n    let {\n      expectedMethod,\n      paramName,\n      moduleName,\n      className,\n      funcName\n    } = _ref5;\n    if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n      throw new Error(\"Unexpected input to 'missing-a-method' error.\");\n    }\n    return \"\".concat(moduleName, \".\").concat(className, \".\").concat(funcName, \"() expected the \") + \"'\".concat(paramName, \"' parameter to expose a '\").concat(expectedMethod, \"' method.\");\n  },\n  'add-to-cache-list-unexpected-type': _ref6 => {\n    let {\n      entry\n    } = _ref6;\n    return \"An unexpected entry was passed to \" + \"'workbox-precaching.PrecacheController.addToCacheList()' The entry \" + \"'\".concat(JSON.stringify(entry), \"' isn't supported. You must supply an array of \") + \"strings with one or more characters, objects with a url property or \" + \"Request objects.\";\n  },\n  'add-to-cache-list-conflicting-entries': _ref7 => {\n    let {\n      firstEntry,\n      secondEntry\n    } = _ref7;\n    if (!firstEntry || !secondEntry) {\n      throw new Error(\"Unexpected input to \" + \"'add-to-cache-list-duplicate-entries' error.\");\n    }\n    return \"Two of the entries passed to \" + \"'workbox-precaching.PrecacheController.addToCacheList()' had the URL \" + \"\".concat(firstEntry, \" but different revision details. Workbox is \") + \"unable to cache and version the asset correctly. Please remove one \" + \"of the entries.\";\n  },\n  'plugin-error-request-will-fetch': _ref8 => {\n    let {\n      thrownErrorMessage\n    } = _ref8;\n    if (!thrownErrorMessage) {\n      throw new Error(\"Unexpected input to \" + \"'plugin-error-request-will-fetch', error.\");\n    }\n    return \"An error was thrown by a plugins 'requestWillFetch()' method. \" + \"The thrown error message was: '\".concat(thrownErrorMessage, \"'.\");\n  },\n  'invalid-cache-name': _ref9 => {\n    let {\n      cacheNameId,\n      value\n    } = _ref9;\n    if (!cacheNameId) {\n      throw new Error(\"Expected a 'cacheNameId' for error 'invalid-cache-name'\");\n    }\n    return \"You must provide a name containing at least one character for \" + \"setCacheDetails({\".concat(cacheNameId, \": '...'}). Received a value of \") + \"'\".concat(JSON.stringify(value), \"'\");\n  },\n  'unregister-route-but-not-found-with-method': _ref10 => {\n    let {\n      method\n    } = _ref10;\n    if (!method) {\n      throw new Error(\"Unexpected input to \" + \"'unregister-route-but-not-found-with-method' error.\");\n    }\n    return \"The route you're trying to unregister was not  previously \" + \"registered for the method type '\".concat(method, \"'.\");\n  },\n  'unregister-route-route-not-registered': () => {\n    return \"The route you're trying to unregister was not previously \" + \"registered.\";\n  },\n  'queue-replay-failed': _ref11 => {\n    let {\n      name\n    } = _ref11;\n    return \"Replaying the background sync queue '\".concat(name, \"' failed.\");\n  },\n  'duplicate-queue-name': _ref12 => {\n    let {\n      name\n    } = _ref12;\n    return \"The Queue name '\".concat(name, \"' is already being used. \") + \"All instances of backgroundSync.Queue must be given unique names.\";\n  },\n  'expired-test-without-max-age': _ref13 => {\n    let {\n      methodName,\n      paramName\n    } = _ref13;\n    return \"The '\".concat(methodName, \"()' method can only be used when the \") + \"'\".concat(paramName, \"' is used in the constructor.\");\n  },\n  'unsupported-route-type': _ref14 => {\n    let {\n      moduleName,\n      className,\n      funcName,\n      paramName\n    } = _ref14;\n    return \"The supplied '\".concat(paramName, \"' parameter was an unsupported type. \") + \"Please check the docs for \".concat(moduleName, \".\").concat(className, \".\").concat(funcName, \" for \") + \"valid input types.\";\n  },\n  'not-array-of-class': _ref15 => {\n    let {\n      value,\n      expectedClass,\n      moduleName,\n      className,\n      funcName,\n      paramName\n    } = _ref15;\n    return \"The supplied '\".concat(paramName, \"' parameter must be an array of \") + \"'\".concat(expectedClass, \"' objects. Received '\").concat(JSON.stringify(value), \",'. \") + \"Please check the call to \".concat(moduleName, \".\").concat(className, \".\").concat(funcName, \"() \") + \"to fix the issue.\";\n  },\n  'max-entries-or-age-required': _ref16 => {\n    let {\n      moduleName,\n      className,\n      funcName\n    } = _ref16;\n    return \"You must define either config.maxEntries or config.maxAgeSeconds\" + \"in \".concat(moduleName, \".\").concat(className, \".\").concat(funcName);\n  },\n  'statuses-or-headers-required': _ref17 => {\n    let {\n      moduleName,\n      className,\n      funcName\n    } = _ref17;\n    return \"You must define either config.statuses or config.headers\" + \"in \".concat(moduleName, \".\").concat(className, \".\").concat(funcName);\n  },\n  'invalid-string': _ref18 => {\n    let {\n      moduleName,\n      funcName,\n      paramName\n    } = _ref18;\n    if (!paramName || !moduleName || !funcName) {\n      throw new Error(\"Unexpected input to 'invalid-string' error.\");\n    }\n    return \"When using strings, the '\".concat(paramName, \"' parameter must start with \") + \"'http' (for cross-origin matches) or '/' (for same-origin matches). \" + \"Please see the docs for \".concat(moduleName, \".\").concat(funcName, \"() for \") + \"more info.\";\n  },\n  'channel-name-required': () => {\n    return \"You must provide a channelName to construct a \" + \"BroadcastCacheUpdate instance.\";\n  },\n  'invalid-responses-are-same-args': () => {\n    return \"The arguments passed into responsesAreSame() appear to be \" + \"invalid. Please ensure valid Responses are used.\";\n  },\n  'expire-custom-caches-only': () => {\n    return \"You must provide a 'cacheName' property when using the \" + \"expiration plugin with a runtime caching strategy.\";\n  },\n  'unit-must-be-bytes': _ref19 => {\n    let {\n      normalizedRangeHeader\n    } = _ref19;\n    if (!normalizedRangeHeader) {\n      throw new Error(\"Unexpected input to 'unit-must-be-bytes' error.\");\n    }\n    return \"The 'unit' portion of the Range header must be set to 'bytes'. \" + \"The Range header provided was \\\"\".concat(normalizedRangeHeader, \"\\\"\");\n  },\n  'single-range-only': _ref20 => {\n    let {\n      normalizedRangeHeader\n    } = _ref20;\n    if (!normalizedRangeHeader) {\n      throw new Error(\"Unexpected input to 'single-range-only' error.\");\n    }\n    return \"Multiple ranges are not supported. Please use a  single start \" + \"value, and optional end value. The Range header provided was \" + \"\\\"\".concat(normalizedRangeHeader, \"\\\"\");\n  },\n  'invalid-range-values': _ref21 => {\n    let {\n      normalizedRangeHeader\n    } = _ref21;\n    if (!normalizedRangeHeader) {\n      throw new Error(\"Unexpected input to 'invalid-range-values' error.\");\n    }\n    return \"The Range header is missing both start and end values. At least \" + \"one of those values is needed. The Range header provided was \" + \"\\\"\".concat(normalizedRangeHeader, \"\\\"\");\n  },\n  'no-range-header': () => {\n    return \"No Range header was found in the Request provided.\";\n  },\n  'range-not-satisfiable': _ref22 => {\n    let {\n      size,\n      start,\n      end\n    } = _ref22;\n    return \"The start (\".concat(start, \") and end (\").concat(end, \") values in the Range are \") + \"not satisfiable by the cached response, which is \".concat(size, \" bytes.\");\n  },\n  'attempt-to-cache-non-get-request': _ref23 => {\n    let {\n      url,\n      method\n    } = _ref23;\n    return \"Unable to cache '\".concat(url, \"' because it is a '\").concat(method, \"' request and \") + \"only 'GET' requests can be cached.\";\n  },\n  'cache-put-with-no-response': _ref24 => {\n    let {\n      url\n    } = _ref24;\n    return \"There was an attempt to cache '\".concat(url, \"' but the response was not \") + \"defined.\";\n  },\n  'no-response': _ref25 => {\n    let {\n      url,\n      error\n    } = _ref25;\n    let message = \"The strategy could not generate a response for '\".concat(url, \"'.\");\n    if (error) {\n      message += \" The underlying error is \".concat(error, \".\");\n    }\n    return message;\n  },\n  'bad-precaching-response': _ref26 => {\n    let {\n      url,\n      status\n    } = _ref26;\n    return \"The precaching request for '\".concat(url, \"' failed\") + (status ? \" with an HTTP status of \".concat(status, \".\") : \".\");\n  },\n  'non-precached-url': _ref27 => {\n    let {\n      url\n    } = _ref27;\n    return \"createHandlerBoundToURL('\".concat(url, \"') was called, but that URL is \") + \"not precached. Please pass in a URL that is precached instead.\";\n  },\n  'add-to-cache-list-conflicting-integrities': _ref28 => {\n    let {\n      url\n    } = _ref28;\n    return \"Two of the entries passed to \" + \"'workbox-precaching.PrecacheController.addToCacheList()' had the URL \" + \"\".concat(url, \" with different integrity values. Please remove one of them.\");\n  },\n  'missing-precache-entry': _ref29 => {\n    let {\n      cacheName,\n      url\n    } = _ref29;\n    return \"Unable to find a precached response in \".concat(cacheName, \" for \").concat(url, \".\");\n  },\n  'cross-origin-copy-response': _ref30 => {\n    let {\n      origin\n    } = _ref30;\n    return \"workbox-core.copyResponse() can only be used with same-origin \" + \"responses. It was passed a response with origin \".concat(origin, \".\");\n  },\n  'opaque-streams-source': _ref31 => {\n    let {\n      type\n    } = _ref31;\n    const message = \"One of the workbox-streams sources resulted in an \" + \"'\".concat(type, \"' response.\");\n    if (type === 'opaqueredirect') {\n      return \"\".concat(message, \" Please do not use a navigation request that results \") + \"in a redirect as a source.\";\n    }\n    return \"\".concat(message, \" Please ensure your sources are CORS-enabled.\");\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}