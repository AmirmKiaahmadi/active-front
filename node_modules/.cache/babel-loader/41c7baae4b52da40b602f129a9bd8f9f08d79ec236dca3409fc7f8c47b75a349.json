{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { genCompactItemStyle } from '../../style/compact-item';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport genColorBlockStyle from './color-block';\nimport genInputStyle from './input';\nimport genPickerStyle from './picker';\nimport genPresetsStyle from './presets';\nimport genSliderStyle from './slider';\nexport const genActiveStyle = (token, borderColor, outlineColor) => ({\n  borderInlineEndWidth: token.lineWidth,\n  borderColor,\n  boxShadow: \"0 0 0 \".concat(unit(token.controlOutlineWidth), \" \").concat(outlineColor),\n  outline: 0\n});\nconst genRtlStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    '&-rtl': {\n      [\"\".concat(componentCls, \"-presets-color\")]: {\n        '&::after': {\n          direction: 'ltr'\n        }\n      },\n      [\"\".concat(componentCls, \"-clear\")]: {\n        '&::after': {\n          direction: 'ltr'\n        }\n      }\n    }\n  };\n};\nconst genClearStyle = (token, size, extraStyle) => {\n  const {\n    componentCls,\n    borderRadiusSM,\n    lineWidth,\n    colorSplit,\n    colorBorder,\n    red6\n  } = token;\n  return {\n    [\"\".concat(componentCls, \"-clear\")]: Object.assign(Object.assign({\n      width: size,\n      height: size,\n      borderRadius: borderRadiusSM,\n      border: \"\".concat(unit(lineWidth), \" solid \").concat(colorSplit),\n      position: 'relative',\n      overflow: 'hidden',\n      cursor: 'inherit',\n      transition: \"all \".concat(token.motionDurationFast)\n    }, extraStyle), {\n      '&::after': {\n        content: '\"\"',\n        position: 'absolute',\n        insetInlineEnd: token.calc(lineWidth).mul(-1).equal(),\n        top: token.calc(lineWidth).mul(-1).equal(),\n        display: 'block',\n        width: 40,\n        // maximum\n        height: 2,\n        // fixed\n        transformOrigin: \"calc(100% - 1px) 1px\",\n        transform: 'rotate(-45deg)',\n        backgroundColor: red6\n      },\n      '&:hover': {\n        borderColor: colorBorder\n      }\n    })\n  };\n};\nconst genStatusStyle = token => {\n  const {\n    componentCls,\n    colorError,\n    colorWarning,\n    colorErrorHover,\n    colorWarningHover,\n    colorErrorOutline,\n    colorWarningOutline\n  } = token;\n  return {\n    [\"&\".concat(componentCls, \"-status-error\")]: {\n      borderColor: colorError,\n      '&:hover': {\n        borderColor: colorErrorHover\n      },\n      [\"&\".concat(componentCls, \"-trigger-active\")]: Object.assign({}, genActiveStyle(token, colorError, colorErrorOutline))\n    },\n    [\"&\".concat(componentCls, \"-status-warning\")]: {\n      borderColor: colorWarning,\n      '&:hover': {\n        borderColor: colorWarningHover\n      },\n      [\"&\".concat(componentCls, \"-trigger-active\")]: Object.assign({}, genActiveStyle(token, colorWarning, colorWarningOutline))\n    }\n  };\n};\nconst genSizeStyle = token => {\n  const {\n    componentCls,\n    controlHeightLG,\n    controlHeightSM,\n    controlHeight,\n    controlHeightXS,\n    borderRadius,\n    borderRadiusSM,\n    borderRadiusXS,\n    borderRadiusLG,\n    fontSizeLG\n  } = token;\n  return {\n    [\"&\".concat(componentCls, \"-lg\")]: {\n      minWidth: controlHeightLG,\n      minHeight: controlHeightLG,\n      borderRadius: borderRadiusLG,\n      [\"\".concat(componentCls, \"-color-block, \").concat(componentCls, \"-clear\")]: {\n        width: controlHeight,\n        height: controlHeight,\n        borderRadius\n      },\n      [\"\".concat(componentCls, \"-trigger-text\")]: {\n        fontSize: fontSizeLG\n      }\n    },\n    [\"&\".concat(componentCls, \"-sm\")]: {\n      minWidth: controlHeightSM,\n      minHeight: controlHeightSM,\n      borderRadius: borderRadiusSM,\n      [\"\".concat(componentCls, \"-color-block, \").concat(componentCls, \"-clear\")]: {\n        width: controlHeightXS,\n        height: controlHeightXS,\n        borderRadius: borderRadiusXS\n      },\n      [\"\".concat(componentCls, \"-trigger-text\")]: {\n        lineHeight: unit(controlHeightXS)\n      }\n    }\n  };\n};\nconst genColorPickerStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    colorPickerWidth,\n    colorPrimary,\n    motionDurationMid,\n    colorBgElevated,\n    colorTextDisabled,\n    colorText,\n    colorBgContainerDisabled,\n    borderRadius,\n    marginXS,\n    marginSM,\n    controlHeight,\n    controlHeightSM,\n    colorBgTextActive,\n    colorPickerPresetColorSize,\n    colorPickerPreviewSize,\n    lineWidth,\n    colorBorder,\n    paddingXXS,\n    fontSize,\n    colorPrimaryHover,\n    controlOutline\n  } = token;\n  return [{\n    [componentCls]: Object.assign({\n      [\"\".concat(componentCls, \"-inner\")]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n        '&-content': {\n          display: 'flex',\n          flexDirection: 'column',\n          width: colorPickerWidth,\n          [\"& > \".concat(antCls, \"-divider\")]: {\n            margin: \"\".concat(unit(marginSM), \" 0 \").concat(unit(marginXS))\n          }\n        },\n        [\"\".concat(componentCls, \"-panel\")]: Object.assign({}, genPickerStyle(token))\n      }, genSliderStyle(token)), genColorBlockStyle(token, colorPickerPreviewSize)), genInputStyle(token)), genPresetsStyle(token)), genClearStyle(token, colorPickerPresetColorSize, {\n        marginInlineStart: 'auto'\n      })), {\n        // Operation bar\n        [\"\".concat(componentCls, \"-operation\")]: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          marginBottom: marginXS\n        }\n      }),\n      '&-trigger': Object.assign(Object.assign(Object.assign(Object.assign({\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        borderRadius,\n        border: \"\".concat(unit(lineWidth), \" solid \").concat(colorBorder),\n        cursor: 'pointer',\n        display: 'inline-flex',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        transition: \"all \".concat(motionDurationMid),\n        background: colorBgElevated,\n        padding: token.calc(paddingXXS).sub(lineWidth).equal(),\n        [\"\".concat(componentCls, \"-trigger-text\")]: {\n          marginInlineStart: marginXS,\n          marginInlineEnd: token.calc(marginXS).sub(token.calc(paddingXXS).sub(lineWidth)).equal(),\n          fontSize,\n          color: colorText,\n          alignSelf: 'center',\n          '&-cell': {\n            '&:not(:last-child):after': {\n              content: '\", \"'\n            },\n            '&-inactive': {\n              color: colorTextDisabled\n            }\n          }\n        },\n        '&:hover': {\n          borderColor: colorPrimaryHover\n        },\n        [\"&\".concat(componentCls, \"-trigger-active\")]: Object.assign({}, genActiveStyle(token, colorPrimary, controlOutline)),\n        '&-disabled': {\n          color: colorTextDisabled,\n          background: colorBgContainerDisabled,\n          cursor: 'not-allowed',\n          '&:hover': {\n            borderColor: colorBgTextActive\n          },\n          [\"\".concat(componentCls, \"-trigger-text\")]: {\n            color: colorTextDisabled\n          }\n        }\n      }, genClearStyle(token, controlHeightSM)), genColorBlockStyle(token, controlHeightSM)), genStatusStyle(token)), genSizeStyle(token))\n    }, genRtlStyle(token))\n  }, genCompactItemStyle(token, {\n    focusElCls: \"\".concat(componentCls, \"-trigger-active\")\n  })];\n};\nexport default genStyleHooks('ColorPicker', token => {\n  const {\n    colorTextQuaternary,\n    marginSM\n  } = token;\n  const colorPickerSliderHeight = 8;\n  const colorPickerToken = mergeToken(token, {\n    colorPickerWidth: 234,\n    colorPickerHandlerSize: 16,\n    colorPickerHandlerSizeSM: 12,\n    colorPickerAlphaInputWidth: 44,\n    colorPickerInputNumberHandleWidth: 16,\n    colorPickerPresetColorSize: 24,\n    colorPickerInsetShadow: \"inset 0 0 1px 0 \".concat(colorTextQuaternary),\n    colorPickerSliderHeight,\n    colorPickerPreviewSize: token.calc(colorPickerSliderHeight).mul(2).add(marginSM).equal()\n  });\n  return [genColorPickerStyle(colorPickerToken)];\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}