{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { genFocusStyle, resetComponent } from '../../style';\nimport { initFadeMotion, initZoomMotion } from '../../style/motion';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nfunction box(position) {\n  return {\n    position,\n    inset: 0\n  };\n}\nexport const genModalMaskStyle = token => {\n  const {\n    componentCls,\n    antCls\n  } = token;\n  return [{\n    [\"\".concat(componentCls, \"-root\")]: {\n      [\"\".concat(componentCls).concat(antCls, \"-zoom-enter, \").concat(componentCls).concat(antCls, \"-zoom-appear\")]: {\n        // reset scale avoid mousePosition bug\n        transform: 'none',\n        opacity: 0,\n        animationDuration: token.motionDurationSlow,\n        // https://github.com/ant-design/ant-design/issues/11777\n        userSelect: 'none'\n      },\n      // https://github.com/ant-design/ant-design/issues/37329\n      // https://github.com/ant-design/ant-design/issues/40272\n      [\"\".concat(componentCls).concat(antCls, \"-zoom-leave \").concat(componentCls, \"-content\")]: {\n        pointerEvents: 'none'\n      },\n      [\"\".concat(componentCls, \"-mask\")]: Object.assign(Object.assign({}, box('fixed')), {\n        zIndex: token.zIndexPopupBase,\n        height: '100%',\n        backgroundColor: token.colorBgMask,\n        pointerEvents: 'none',\n        [\"\".concat(componentCls, \"-hidden\")]: {\n          display: 'none'\n        }\n      }),\n      [\"\".concat(componentCls, \"-wrap\")]: Object.assign(Object.assign({}, box('fixed')), {\n        zIndex: token.zIndexPopupBase,\n        overflow: 'auto',\n        outline: 0,\n        WebkitOverflowScrolling: 'touch'\n      })\n    }\n  }, {\n    [\"\".concat(componentCls, \"-root\")]: initFadeMotion(token)\n  }];\n};\nconst genModalStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return [\n  // ======================== Root =========================\n  {\n    [\"\".concat(componentCls, \"-root\")]: {\n      [\"\".concat(componentCls, \"-wrap-rtl\")]: {\n        direction: 'rtl'\n      },\n      [\"\".concat(componentCls, \"-centered\")]: {\n        textAlign: 'center',\n        '&::before': {\n          display: 'inline-block',\n          width: 0,\n          height: '100%',\n          verticalAlign: 'middle',\n          content: '\"\"'\n        },\n        [componentCls]: {\n          top: 0,\n          display: 'inline-block',\n          paddingBottom: 0,\n          textAlign: 'start',\n          verticalAlign: 'middle'\n        }\n      },\n      [\"@media (max-width: \".concat(token.screenSMMax, \"px)\")]: {\n        [componentCls]: {\n          maxWidth: 'calc(100vw - 16px)',\n          margin: \"\".concat(unit(token.marginXS), \" auto\")\n        },\n        [\"\".concat(componentCls, \"-centered\")]: {\n          [componentCls]: {\n            flex: 1\n          }\n        }\n      }\n    }\n  },\n  // ======================== Modal ========================\n  {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      pointerEvents: 'none',\n      position: 'relative',\n      top: 100,\n      width: 'auto',\n      maxWidth: \"calc(100vw - \".concat(unit(token.calc(token.margin).mul(2).equal()), \")\"),\n      margin: '0 auto',\n      paddingBottom: token.paddingLG,\n      [\"\".concat(componentCls, \"-title\")]: {\n        margin: 0,\n        color: token.titleColor,\n        fontWeight: token.fontWeightStrong,\n        fontSize: token.titleFontSize,\n        lineHeight: token.titleLineHeight,\n        wordWrap: 'break-word'\n      },\n      [\"\".concat(componentCls, \"-content\")]: {\n        position: 'relative',\n        backgroundColor: token.contentBg,\n        backgroundClip: 'padding-box',\n        border: 0,\n        borderRadius: token.borderRadiusLG,\n        boxShadow: token.boxShadow,\n        pointerEvents: 'auto',\n        padding: token.contentPadding\n      },\n      [\"\".concat(componentCls, \"-close\")]: Object.assign({\n        position: 'absolute',\n        top: token.calc(token.modalHeaderHeight).sub(token.modalCloseBtnSize).div(2).equal(),\n        insetInlineEnd: token.calc(token.modalHeaderHeight).sub(token.modalCloseBtnSize).div(2).equal(),\n        zIndex: token.calc(token.zIndexPopupBase).add(10).equal(),\n        padding: 0,\n        color: token.modalCloseIconColor,\n        fontWeight: token.fontWeightStrong,\n        lineHeight: 1,\n        textDecoration: 'none',\n        background: 'transparent',\n        borderRadius: token.borderRadiusSM,\n        width: token.modalCloseBtnSize,\n        height: token.modalCloseBtnSize,\n        border: 0,\n        outline: 0,\n        cursor: 'pointer',\n        transition: \"color \".concat(token.motionDurationMid, \", background-color \").concat(token.motionDurationMid),\n        '&-x': {\n          display: 'flex',\n          fontSize: token.fontSizeLG,\n          fontStyle: 'normal',\n          lineHeight: unit(token.modalCloseBtnSize),\n          justifyContent: 'center',\n          textTransform: 'none',\n          textRendering: 'auto'\n        },\n        '&:disabled': {\n          pointerEvents: 'none'\n        },\n        '&:hover': {\n          color: token.modalCloseIconHoverColor,\n          backgroundColor: token.colorBgTextHover,\n          textDecoration: 'none'\n        },\n        '&:active': {\n          backgroundColor: token.colorBgTextActive\n        }\n      }, genFocusStyle(token)),\n      [\"\".concat(componentCls, \"-header\")]: {\n        color: token.colorText,\n        background: token.headerBg,\n        borderRadius: \"\".concat(unit(token.borderRadiusLG), \" \").concat(unit(token.borderRadiusLG), \" 0 0\"),\n        marginBottom: token.headerMarginBottom,\n        padding: token.headerPadding,\n        borderBottom: token.headerBorderBottom\n      },\n      [\"\".concat(componentCls, \"-body\")]: {\n        fontSize: token.fontSize,\n        lineHeight: token.lineHeight,\n        wordWrap: 'break-word',\n        padding: token.bodyPadding,\n        [\"\".concat(componentCls, \"-body-skeleton\")]: {\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          margin: \"\".concat(unit(token.margin), \" auto\")\n        }\n      },\n      [\"\".concat(componentCls, \"-footer\")]: {\n        textAlign: 'end',\n        background: token.footerBg,\n        marginTop: token.footerMarginTop,\n        padding: token.footerPadding,\n        borderTop: token.footerBorderTop,\n        borderRadius: token.footerBorderRadius,\n        [\"> \".concat(token.antCls, \"-btn + \").concat(token.antCls, \"-btn\")]: {\n          marginInlineStart: token.marginXS\n        }\n      },\n      [\"\".concat(componentCls, \"-open\")]: {\n        overflow: 'hidden'\n      }\n    })\n  },\n  // ======================== Pure =========================\n  {\n    [\"\".concat(componentCls, \"-pure-panel\")]: {\n      top: 'auto',\n      padding: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      [\"\".concat(componentCls, \"-content,\\n          \").concat(componentCls, \"-body,\\n          \").concat(componentCls, \"-confirm-body-wrapper\")]: {\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 'auto'\n      },\n      [\"\".concat(componentCls, \"-confirm-body\")]: {\n        marginBottom: 'auto'\n      }\n    }\n  }];\n};\nconst genRTLStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [\"\".concat(componentCls, \"-root\")]: {\n      [\"\".concat(componentCls, \"-wrap-rtl\")]: {\n        direction: 'rtl',\n        [\"\".concat(componentCls, \"-confirm-body\")]: {\n          direction: 'rtl'\n        }\n      }\n    }\n  };\n};\n// ============================== Export ==============================\nexport const prepareToken = token => {\n  const headerPaddingVertical = token.padding;\n  const headerFontSize = token.fontSizeHeading5;\n  const headerLineHeight = token.lineHeightHeading5;\n  const modalToken = mergeToken(token, {\n    modalHeaderHeight: token.calc(token.calc(headerLineHeight).mul(headerFontSize).equal()).add(token.calc(headerPaddingVertical).mul(2).equal()).equal(),\n    modalFooterBorderColorSplit: token.colorSplit,\n    modalFooterBorderStyle: token.lineType,\n    modalFooterBorderWidth: token.lineWidth,\n    modalCloseIconColor: token.colorIcon,\n    modalCloseIconHoverColor: token.colorIconHover,\n    modalCloseBtnSize: token.controlHeight,\n    modalConfirmIconSize: token.fontHeight,\n    modalTitleHeight: token.calc(token.titleFontSize).mul(token.titleLineHeight).equal()\n  });\n  return modalToken;\n};\nexport const prepareComponentToken = token => ({\n  footerBg: 'transparent',\n  headerBg: token.colorBgElevated,\n  titleLineHeight: token.lineHeightHeading5,\n  titleFontSize: token.fontSizeHeading5,\n  contentBg: token.colorBgElevated,\n  titleColor: token.colorTextHeading,\n  // internal\n  contentPadding: token.wireframe ? 0 : \"\".concat(unit(token.paddingMD), \" \").concat(unit(token.paddingContentHorizontalLG)),\n  headerPadding: token.wireframe ? \"\".concat(unit(token.padding), \" \").concat(unit(token.paddingLG)) : 0,\n  headerBorderBottom: token.wireframe ? \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorSplit) : 'none',\n  headerMarginBottom: token.wireframe ? 0 : token.marginXS,\n  bodyPadding: token.wireframe ? token.paddingLG : 0,\n  footerPadding: token.wireframe ? \"\".concat(unit(token.paddingXS), \" \").concat(unit(token.padding)) : 0,\n  footerBorderTop: token.wireframe ? \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorSplit) : 'none',\n  footerBorderRadius: token.wireframe ? \"0 0 \".concat(unit(token.borderRadiusLG), \" \").concat(unit(token.borderRadiusLG)) : 0,\n  footerMarginTop: token.wireframe ? 0 : token.marginSM,\n  confirmBodyPadding: token.wireframe ? \"\".concat(unit(token.padding * 2), \" \").concat(unit(token.padding * 2), \" \").concat(unit(token.paddingLG)) : 0,\n  confirmIconMarginInlineEnd: token.wireframe ? token.margin : token.marginSM,\n  confirmBtnsMarginTop: token.wireframe ? token.marginLG : token.marginSM\n});\nexport default genStyleHooks('Modal', token => {\n  const modalToken = prepareToken(token);\n  return [genModalStyle(modalToken), genRTLStyle(modalToken), genModalMaskStyle(modalToken), initZoomMotion(modalToken, 'zoom')];\n}, prepareComponentToken, {\n  unitless: {\n    titleLineHeight: true\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}