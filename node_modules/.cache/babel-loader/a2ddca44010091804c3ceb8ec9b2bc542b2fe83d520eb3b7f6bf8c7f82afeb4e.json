{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// ============================== Styles ==============================\nexport const genCheckboxStyle = token => {\n  const {\n    checkboxCls\n  } = token;\n  const wrapperCls = \"\".concat(checkboxCls, \"-wrapper\");\n  return [\n  // ===================== Basic =====================\n  {\n    // Group\n    [\"\".concat(checkboxCls, \"-group\")]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      flexWrap: 'wrap',\n      columnGap: token.marginXS,\n      // Group > Grid\n      [\"> \".concat(token.antCls, \"-row\")]: {\n        flex: 1\n      }\n    }),\n    // Wrapper\n    [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      alignItems: 'baseline',\n      cursor: 'pointer',\n      // Fix checkbox & radio in flex align #30260\n      '&:after': {\n        display: 'inline-block',\n        width: 0,\n        overflow: 'hidden',\n        content: \"'\\\\a0'\"\n      },\n      // Checkbox near checkbox\n      [\"& + \".concat(wrapperCls)]: {\n        marginInlineStart: 0\n      },\n      [\"&\".concat(wrapperCls, \"-in-form-item\")]: {\n        'input[type=\"checkbox\"]': {\n          width: 14,\n          // FIXME: magic\n          height: 14 // FIXME: magic\n        }\n      }\n    }),\n    // Wrapper > Checkbox\n    [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      lineHeight: 1,\n      cursor: 'pointer',\n      borderRadius: token.borderRadiusSM,\n      // To make alignment right when `controlHeight` is changed\n      // Ref: https://github.com/ant-design/ant-design/issues/41564\n      alignSelf: 'center',\n      // Wrapper > Checkbox > input\n      [\"\".concat(checkboxCls, \"-input\")]: {\n        position: 'absolute',\n        // Since baseline align will get additional space offset,\n        // we need to move input to top to make it align with text.\n        // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799\n        inset: 0,\n        zIndex: 1,\n        cursor: 'pointer',\n        opacity: 0,\n        margin: 0,\n        [\"&:focus-visible + \".concat(checkboxCls, \"-inner\")]: Object.assign({}, genFocusOutline(token))\n      },\n      // Wrapper > Checkbox > inner\n      [\"\".concat(checkboxCls, \"-inner\")]: {\n        boxSizing: 'border-box',\n        display: 'block',\n        width: token.checkboxSize,\n        height: token.checkboxSize,\n        direction: 'ltr',\n        backgroundColor: token.colorBgContainer,\n        border: \"\".concat(unit(token.lineWidth), \" \").concat(token.lineType, \" \").concat(token.colorBorder),\n        borderRadius: token.borderRadiusSM,\n        borderCollapse: 'separate',\n        transition: \"all \".concat(token.motionDurationSlow),\n        '&:after': {\n          boxSizing: 'border-box',\n          position: 'absolute',\n          top: '50%',\n          insetInlineStart: '25%',\n          display: 'table',\n          width: token.calc(token.checkboxSize).div(14).mul(5).equal(),\n          height: token.calc(token.checkboxSize).div(14).mul(8).equal(),\n          border: \"\".concat(unit(token.lineWidthBold), \" solid \").concat(token.colorWhite),\n          borderTop: 0,\n          borderInlineStart: 0,\n          transform: 'rotate(45deg) scale(0) translate(-50%,-50%)',\n          opacity: 0,\n          content: '\"\"',\n          transition: \"all \".concat(token.motionDurationFast, \" \").concat(token.motionEaseInBack, \", opacity \").concat(token.motionDurationFast)\n        }\n      },\n      // Wrapper > Checkbox + Text\n      '& + span': {\n        paddingInlineStart: token.paddingXS,\n        paddingInlineEnd: token.paddingXS\n      }\n    })\n  },\n  // ===================== Hover =====================\n  {\n    // Wrapper & Wrapper > Checkbox\n    [\"\\n        \".concat(wrapperCls, \":not(\").concat(wrapperCls, \"-disabled),\\n        \").concat(checkboxCls, \":not(\").concat(checkboxCls, \"-disabled)\\n      \")]: {\n      [\"&:hover \".concat(checkboxCls, \"-inner\")]: {\n        borderColor: token.colorPrimary\n      }\n    },\n    [\"\".concat(wrapperCls, \":not(\").concat(wrapperCls, \"-disabled)\")]: {\n      [\"&:hover \".concat(checkboxCls, \"-checked:not(\").concat(checkboxCls, \"-disabled) \").concat(checkboxCls, \"-inner\")]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [\"&:hover \".concat(checkboxCls, \"-checked:not(\").concat(checkboxCls, \"-disabled):after\")]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  },\n  // ==================== Checked ====================\n  {\n    // Wrapper > Checkbox\n    [\"\".concat(checkboxCls, \"-checked\")]: {\n      [\"\".concat(checkboxCls, \"-inner\")]: {\n        backgroundColor: token.colorPrimary,\n        borderColor: token.colorPrimary,\n        '&:after': {\n          opacity: 1,\n          transform: 'rotate(45deg) scale(1) translate(-50%,-50%)',\n          transition: \"all \".concat(token.motionDurationMid, \" \").concat(token.motionEaseOutBack, \" \").concat(token.motionDurationFast)\n        }\n      }\n    },\n    [\"\\n        \".concat(wrapperCls, \"-checked:not(\").concat(wrapperCls, \"-disabled),\\n        \").concat(checkboxCls, \"-checked:not(\").concat(checkboxCls, \"-disabled)\\n      \")]: {\n      [\"&:hover \".concat(checkboxCls, \"-inner\")]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      }\n    }\n  },\n  // ================= Indeterminate =================\n  {\n    [checkboxCls]: {\n      '&-indeterminate': {\n        // Wrapper > Checkbox > inner\n        [\"\".concat(checkboxCls, \"-inner\")]: {\n          backgroundColor: \"\".concat(token.colorBgContainer, \" !important\"),\n          borderColor: \"\".concat(token.colorBorder, \" !important\"),\n          '&:after': {\n            top: '50%',\n            insetInlineStart: '50%',\n            width: token.calc(token.fontSizeLG).div(2).equal(),\n            height: token.calc(token.fontSizeLG).div(2).equal(),\n            backgroundColor: token.colorPrimary,\n            border: 0,\n            transform: 'translate(-50%, -50%) scale(1)',\n            opacity: 1,\n            content: '\"\"'\n          }\n        },\n        // https://github.com/ant-design/ant-design/issues/50074\n        [\"&:hover \".concat(checkboxCls, \"-inner\")]: {\n          backgroundColor: \"\".concat(token.colorBgContainer, \" !important\"),\n          borderColor: \"\".concat(token.colorPrimary, \" !important\")\n        }\n      }\n    }\n  },\n  // ==================== Disable ====================\n  {\n    // Wrapper\n    [\"\".concat(wrapperCls, \"-disabled\")]: {\n      cursor: 'not-allowed'\n    },\n    // Wrapper > Checkbox\n    [\"\".concat(checkboxCls, \"-disabled\")]: {\n      // Wrapper > Checkbox > input\n      [\"&, \".concat(checkboxCls, \"-input\")]: {\n        cursor: 'not-allowed',\n        // Disabled for native input to enable Tooltip event handler\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901\n        pointerEvents: 'none'\n      },\n      // Wrapper > Checkbox > inner\n      [\"\".concat(checkboxCls, \"-inner\")]: {\n        background: token.colorBgContainerDisabled,\n        borderColor: token.colorBorder,\n        '&:after': {\n          borderColor: token.colorTextDisabled\n        }\n      },\n      '&:after': {\n        display: 'none'\n      },\n      '& + span': {\n        color: token.colorTextDisabled\n      },\n      [\"&\".concat(checkboxCls, \"-indeterminate \").concat(checkboxCls, \"-inner::after\")]: {\n        background: token.colorTextDisabled\n      }\n    }\n  }];\n};\n// ============================== Export ==============================\nexport function getStyle(prefixCls, token) {\n  const checkboxToken = mergeToken(token, {\n    checkboxCls: \".\".concat(prefixCls),\n    checkboxSize: token.controlInteractiveSize\n  });\n  return [genCheckboxStyle(checkboxToken)];\n}\nexport default genStyleHooks('Checkbox', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [getStyle(prefixCls, token)];\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}