{"ast":null,"code":"import _objectSpread from \"/Users/amirkia/Documents/active-front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classPrivateFieldInitSpec from \"/Users/amirkia/Documents/active-front/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/amirkia/Documents/active-front/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/amirkia/Documents/active-front/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _mutations, _mutationId;\n// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = (_mutations = /*#__PURE__*/new WeakMap(), _mutationId = /*#__PURE__*/new WeakMap(), class MutationCache extends Subscribable {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _classPrivateFieldInitSpec(this, _mutations, void 0);\n    _classPrivateFieldInitSpec(this, _mutationId, void 0);\n    this.config = config;\n    _classPrivateFieldSet(_mutations, this, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(_mutationId, this, Date.now());\n  }\n  build(client, options, state) {\n    var _this$mutationId;\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: _classPrivateFieldSet(_mutationId, this, (_this$mutationId = _classPrivateFieldGet(_mutationId, this), ++_this$mutationId)),\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    var _classPrivateFieldGet2;\n    const scope = scopeFor(mutation);\n    const mutations = (_classPrivateFieldGet2 = _classPrivateFieldGet(_mutations, this).get(scope)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : [];\n    mutations.push(mutation);\n    _classPrivateFieldGet(_mutations, this).set(scope, mutations);\n    this.notify({\n      type: \"added\",\n      mutation\n    });\n  }\n  remove(mutation) {\n    const scope = scopeFor(mutation);\n    if (_classPrivateFieldGet(_mutations, this).has(scope)) {\n      var _classPrivateFieldGet3;\n      const mutations = (_classPrivateFieldGet3 = _classPrivateFieldGet(_mutations, this).get(scope)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.filter(x => x !== mutation);\n      if (mutations) {\n        if (mutations.length === 0) {\n          _classPrivateFieldGet(_mutations, this).delete(scope);\n        } else {\n          _classPrivateFieldGet(_mutations, this).set(scope, mutations);\n        }\n      }\n    }\n    this.notify({\n      type: \"removed\",\n      mutation\n    });\n  }\n  canRun(mutation) {\n    var _classPrivateFieldGet4;\n    const firstPendingMutation = (_classPrivateFieldGet4 = _classPrivateFieldGet(_mutations, this).get(scopeFor(mutation))) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.find(m => m.state.status === \"pending\");\n    return !firstPendingMutation || firstPendingMutation === mutation;\n  }\n  runNext(mutation) {\n    var _classPrivateFieldGet5, _foundMutation$contin;\n    const foundMutation = (_classPrivateFieldGet5 = _classPrivateFieldGet(_mutations, this).get(scopeFor(mutation))) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.find(m => m !== mutation && m.state.isPaused);\n    return (_foundMutation$contin = foundMutation === null || foundMutation === void 0 ? void 0 : foundMutation.continue()) !== null && _foundMutation$contin !== void 0 ? _foundMutation$contin : Promise.resolve();\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n  getAll() {\n    return [..._classPrivateFieldGet(_mutations, this).values()].flat();\n  }\n  find(filters) {\n    const defaultedFilters = _objectSpread({\n      exact: true\n    }, filters);\n    return this.getAll().find(mutation => matchMutation(defaultedFilters, mutation));\n  }\n  findAll() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getAll().filter(mutation => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter(x => x.state.isPaused);\n    return notifyManager.batch(() => Promise.all(pausedMutations.map(mutation => mutation.continue().catch(noop))));\n  }\n});\nfunction scopeFor(mutation) {\n  var _mutation$options$sco, _mutation$options$sco2;\n  return (_mutation$options$sco = (_mutation$options$sco2 = mutation.options.scope) === null || _mutation$options$sco2 === void 0 ? void 0 : _mutation$options$sco2.id) !== null && _mutation$options$sco !== void 0 ? _mutation$options$sco : String(mutation.mutationId);\n}\nexport { MutationCache };\n//# sourceMappingURL=mutationCache.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}