{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nconst isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nconst publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('install',function(e){//@ts-ignore\ne.waitUntil(Promise.all([//@ts-expect-error\ncaches.open(STATIC_CACHE_NAME),//@ts-expect-error\ncaches.open(APP_CACHE_NAME),//@ts-expect-error\nwindow.skipWaiting()]).then(function(storage){const static_cache=storage[0];const app_cache=storage[1];return Promise.all([//@ts-expect-error\nstatic_cache.addAll(CACHE_STATIC),//@ts-expect-error\napp_cache.addAll(CACHE_APP)]);}));});window.addEventListener('activate',function(e){//@ts-ignore\ne.waitUntil(Promise.all([//@ts-expect-error\nwindow.clients.claim(),caches.keys().then(function(cacheNames){return Promise.all(cacheNames.map(function(cacheName){if(//@ts-expect-error\ncacheName!==APP_CACHE_NAME&&//@ts-expect-error\ncacheName!==STATIC_CACHE_NAME){return caches.delete(cacheName);}}));})]));});window.addEventListener('load',()=>{const swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.ts\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(registration=>{// Use the PushManager to get the user's subscription to the push service.\n});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{registration.pushManager.getSubscription().then(async function(subscription){// If a subscription was found, return it.\n// if (subscription) {\n//   console.log(subscription);\n//   return subscription;\n// }\n// return registration.pushManager.subscribe({\n//   userVisibleOnly: true,\n//   applicationServerKey: urlBase64ToUint8Array(\n//     'BO60T_oiPYcjRST9Dkppg-R69kEoLjSZliLw0EvTwAof6IdU8v-7c4ROpG16LPG0fsoGH7k_gvXGBjnyxvEov2c',\n//   ),\n// });\n// Get the server's public key\n//const response = await fetch('./vapidPublicKey');\n//const vapidPublicKey = await response.text();\n//const vapidKeys = webpush.generateVAPIDKeys();\n// Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet\n// urlBase64ToUint8Array() is defined in /tools.js\n//const convertedVapidKey = vapidKeys;\n// webpush.setVapidDetails(\n//   'https://shop.beta.mazraeapp.com/',\n//   vapidKeys.publicKey,\n//   vapidKeys.privateKey,\n// );\n// Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to\n// send notifications that don't have a visible effect for the user).\n});// .then(subscription => {\n//   console.log('info workers');\n//   console.log(subscription);\n//   try {\n//     const userProfile = window.localStorage.getItem('user');\n//     fetch(\n//       process.env.REACT_APP_API_URL + '/api/profile/supplier/set-fcm',\n//       {\n//         method: 'PATCH',\n//         headers: {\n//           'Content-type': 'application/json',\n//           Authorization: userProfile\n//             ? `Token ${JSON.parse(userProfile)?.token}`\n//             : '',\n//         },\n//         body: JSON.stringify({\n//           fcm_token: subscription,\n//         }),\n//       },\n//     );\n//   } catch (error) {\n//     console.log(error);\n//   }\n// });\nregistration.update();setInterval(()=>{registration.update();},1000*60*5);registration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\n// console.log('update find...');\n//  ShowToastMessage({\n//    type: 'Success',\n//    text: 'در حال به روزرسانی...',\n//  });\nsetTimeout(()=>{window.location.reload();},2000);//@ts-expect-error\nregistration.waiting.postMessage({type:'SKIP_WAITING'});//\n// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// console.log('display');\n// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\n// console.log('Content is cached for offline use.');\n// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(error=>{});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(response=>{// Ensure service worker exists, and that we really are getting a JS file.\nconst contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(registration=>{registration.unregister().then(()=>{window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(()=>{});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{});}}// function urlBase64ToUint8Array(base64String: string) {\n//   const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n//   const base64 = (base64String + padding)\n//     .replace(/\\-/g, '+')\n//     .replace(/_/g, '/');\n//   const rawData = window.atob(base64);\n//   const outputArray = new Uint8Array(rawData.length);\n//   for (let i = 0; i < rawData.length; ++i) {\n//     outputArray[i] = rawData.charCodeAt(i);\n//   }\n//   return outputArray;\n// }","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}