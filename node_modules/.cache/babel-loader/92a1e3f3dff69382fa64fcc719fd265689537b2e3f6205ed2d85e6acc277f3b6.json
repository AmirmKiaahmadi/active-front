{"ast":null,"code":"// handle border collapse\nfunction compactItemBorder(token, parentCls, options) {\n  const {\n    focusElCls,\n    focus,\n    borderElCls\n  } = options;\n  const childCombinator = borderElCls ? '> *' : '';\n  const hoverEffects = ['hover', focus ? 'focus' : null, 'active'].filter(Boolean).map(n => \"&:\".concat(n, \" \").concat(childCombinator)).join(',');\n  return {\n    [\"&-item:not(\".concat(parentCls, \"-last-item)\")]: {\n      marginInlineEnd: token.calc(token.lineWidth).mul(-1).equal()\n    },\n    '&-item': Object.assign(Object.assign({\n      [hoverEffects]: {\n        zIndex: 2\n      }\n    }, focusElCls ? {\n      [\"&\".concat(focusElCls)]: {\n        zIndex: 2\n      }\n    } : {}), {\n      [\"&[disabled] \".concat(childCombinator)]: {\n        zIndex: 0\n      }\n    })\n  };\n}\n// handle border-radius\nfunction compactItemBorderRadius(prefixCls, parentCls, options) {\n  const {\n    borderElCls\n  } = options;\n  const childCombinator = borderElCls ? \"> \".concat(borderElCls) : '';\n  return {\n    [\"&-item:not(\".concat(parentCls, \"-first-item):not(\").concat(parentCls, \"-last-item) \").concat(childCombinator)]: {\n      borderRadius: 0\n    },\n    [\"&-item:not(\".concat(parentCls, \"-last-item)\").concat(parentCls, \"-first-item\")]: {\n      [\"& \".concat(childCombinator, \", &\").concat(prefixCls, \"-sm \").concat(childCombinator, \", &\").concat(prefixCls, \"-lg \").concat(childCombinator)]: {\n        borderStartEndRadius: 0,\n        borderEndEndRadius: 0\n      }\n    },\n    [\"&-item:not(\".concat(parentCls, \"-first-item)\").concat(parentCls, \"-last-item\")]: {\n      [\"& \".concat(childCombinator, \", &\").concat(prefixCls, \"-sm \").concat(childCombinator, \", &\").concat(prefixCls, \"-lg \").concat(childCombinator)]: {\n        borderStartStartRadius: 0,\n        borderEndStartRadius: 0\n      }\n    }\n  };\n}\nexport function genCompactItemStyle(token) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    focus: true\n  };\n  const {\n    componentCls\n  } = token;\n  const compactCls = \"\".concat(componentCls, \"-compact\");\n  return {\n    [compactCls]: Object.assign(Object.assign({}, compactItemBorder(token, compactCls, options)), compactItemBorderRadius(componentCls, compactCls, options))\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}